// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}


model User{
  id String @default(cuid()) @id
  firstName String
  lastName  String?
  email String @unique
  password String?
  profileImgUrl String?
  coverImgUrl String?
  bio String?
  dateOfBirth String?
  location String?
  userName String @unique
  posts Tweet[] @relation(onDelete: CASCADE)
  likedTweets Like[] @relation(onDelete: CASCADE)
  commentTweets Comment[] @relation(onDelete: CASCADE)
  followers Follows[] @relation("followers",onDelete: CASCADE)
  followingList Follows[] @relation("following",onDelete: CASCADE)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Tweet{
  id String @id @default(cuid())
  content String 
  photoArray String[]
  videoArray String[]
  authorId String
  author User @relation(fields: [authorId],references: [id], onDelete: CASCADE)
  LikedBy Like[] @relation(onDelete: CASCADE)
  commentAuthor Comment[] @relation(onDelete: CASCADE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like{
  id String @id @default(cuid())
  userId String
  tweetId String?
  commentId String? 
  comment Comment? @relation(fields: [commentId], references: [id],onDelete: CASCADE)
  user User @relation(fields: [userId],references: [id],onDelete: CASCADE)
  tweet Tweet? @relation(fields: [tweetId],references: [id],onDelete: CASCADE)

  @@unique([userId,tweetId])
  @@unique([userId,commentId])
}

model Comment{
  id String @id @default(cuid())
  comment String
  mediaArray String[]
  tweetId String?
  userId String
  tweet Tweet? @relation(fields: [tweetId],references: [id],onDelete: CASCADE)
  user User @relation(fields: [userId],references: [id],onDelete: CASCADE)
  parentId String?
  parent Comment? @relation("CommentReplies",fields: [parentId],references: [id],onDelete: CASCADE)

  replies Comment[] @relation("CommentReplies")
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
}

model Follows{
followerId String
follower User @relation("followers",fields: [followerId],references: [id],onDelete: CASCADE)
followingId String
following User @relation("following",fields: [followingId],references: [id],onDelete: CASCADE)
@@id([followerId,followingId])

}

